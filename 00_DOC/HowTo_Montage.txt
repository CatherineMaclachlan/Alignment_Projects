
==========================
Project folder and input
==========================

To get started, we need to gather:
- Project folder, we'll call it DEMO in this tutorial.
- Parameter folder and file.
- Input data file.
- Topmost scipt.

+++++++
Folders
+++++++

# Manually...
> mkdir DEMO
> mkdir DEMO/prms

++++++++++
Parameters
++++++++++

Copy parameter set from here:
???/Alignment_Projects/macros/matchparams_BockEM.txt

Rename it and place it here:
DEMO/prms/matchparams.txt

++++++++++
Input File
++++++++++

Get copy of script to concatenated Rick files from here:
???/Alignment_Projects/macros/catlyr.sht

Edit catlyr.sht as needed. For example, for 200 layer Bock stack I did this:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dir=/nobackup/bock/eric/zz200/130818-layouts/

for z in $(seq 879 1088)
do
	N=$(printf "%04d" $z)
	cat $dir$N".bill.txt" >> Z879-1088.txt
done
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Make data file
> ./catlyr.sht

++++++++++++++
Topmost script
++++++++++++++

> cp ???/Alignment_Projects/1_TopScripts/topgo.sht DEMO/topgo.sht

Edit topgo.sht, especially to name input file and layer range:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
topscripts Z879-1088.txt -idb=idb0 -zmin=879 -zmax=1088 -nf
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

========================
Finish workspace setup
========================

# First script.
> ./topgo.sht

# This creates several new sht scripts:
# {crossgo, dbgo, mongo, upmongo}
# To make montages alone, we only need:
# {dbgo, mongo}.

# Convert the input Rick file to an image database.
# Edit dbgo.sht as needed (probably need to add a
# specification for a cropping file -crop=mycropfile).
> ./dbgo.sht

# Read makeidb.log file for any error messages.

# Edit mongo.sht to add '-davinc -minareafrac=0.01'
> ./mongo.sht

# Read makemontages.log file for any error messages.

# Mongo.sht examines the input tile positions and
# pairs up tiles that have sufficient overlap. Lists
# of tile pairs are distributed into several make files,
# one make file per cluster job, one make file per block
# Sx_y, (x,y) indexing the block's grid location. Mongo
# also creates a hierarchy of layer/block subfolders
# to receive cluster output.

=======================================
Submit montage make files to cluster
=======================================

> cd temp0

# Run your layers of interest
> ./ssub8.sht 879 1088

# This submits lists of jobs named by pattern 'qSx_y-z'
# where (x,y) are block indices and z is the layer index.

# Periodically check for completion of all jobs
> qstat

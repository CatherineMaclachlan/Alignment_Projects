

# ==========================
# ==========================
# Standard build definitions
# ==========================
# ==========================


# =======================
# text processing helpers
# =======================

empty :=
comma := ,
space := $(empty) $(empty)

# =====
# paths
# =====

# Edit these paths ----------------------------------------------
#
# My git alignment code repository lives here:
PATH_SRCCODE  := /groups/apig/tomo/Alignment_Projects
#
# I want my alignment output binaries to live here:
PATH_BIN      := /groups/apig/tomo/lou_stuff/binaries
# ---------------------------------------------------------------

# DO NOT EDIT: These paths are fixed or derived from yours ------
#
PATH_PUBLIC   := /groups/apig/share/ClusterSupport/Libraries

PATH_TIF      := $(PATH_PUBLIC)/TIFF
PATH_TIF_INC  := $(PATH_TIF)/include
PATH_TIF_LIB  := $(PATH_TIF)/lib
PATH_PNG      := $(PATH_PUBLIC)/PNG
PATH_PNG_INC  := $(PATH_PNG)/include
PATH_PNG_LIB  := $(PATH_PNG)/lib
PATH_ZLB      := $(PATH_PUBLIC)/ZLIB
PATH_ZLB_INC  := $(PATH_ZLB)/include
PATH_ZLB_LIB  := $(PATH_ZLB)/lib
PATH_FFT      := $(PATH_PUBLIC)/FFT
PATH_FFT_INC  := $(PATH_FFT)/include
PATH_FFT_LIB  := $(PATH_FFT)/lib

PATH_GEN      := $(PATH_SRCCODE)/0_GEN
PATH_UTL      := $(PATH_SRCCODE)/0_UTL
PATH_XML      := $(PATH_SRCCODE)/0_XML
PATH_BK       := $(PATH_SRCCODE)/0_BK

PATH_OUT      := $(PATH_BIN)

# =============
# include paths
# =============

INCLUDES_STD := -I{$(PATH_TIF_INC),$(PATH_PNG_INC),$(PATH_FFT_INC),$(PATH_GEN),$(PATH_UTL),$(PATH_XML)}

# ============
# object files
# ============

# ===========================
# archives (static libraries)
# ===========================

STATICLIBS_GEN := $(PATH_GEN)/genlib.a
STATICLIBS_UTL := $(PATH_UTL)/utllib.a
STATICLIBS_XML := $(PATH_XML)/xmllib.a

STATICLIBS_TIF := $(PATH_TIF_LIB)/libtiff.a
STATICLIBS_PNG := $(PATH_PNG_LIB)/libpng.a
STATICLIBS_ZLB := $(PATH_ZLB_LIB)/libz.a
STATICLIBS_FFT := $(PATH_FFT_LIB)/libfftw3.a

# ==================
# standard libraries
# ==================

# -l option searches usual hierarchy for static library, e.g.,
# -lXXX searches for 'libXXX.a'. -L option adds dirs to the
# search hierarchy for -l option.

# jpeg:		jpeg image format
# m:		math
# c:		c runtime
# rt:		posix libraries (e.g. semaphore support)

OTHERLIBS_STD := -l{jpeg,m,c,rt}

# ==============================
# Combine all standard libraries
# ==============================

# IMPORTANT:
# Libraries must be listed such that those with greater dependency are first
# and the more independent libraries are toward the tail of the list.

LINKS_STD :=\
 $(STATICLIBS_GEN)\
 $(STATICLIBS_UTL)\
 $(STATICLIBS_XML)\
 $(STATICLIBS_TIF)\
 $(STATICLIBS_PNG)\
 $(STATICLIBS_ZLB)\
 $(STATICLIBS_FFT)\
 $(OTHERLIBS_STD)

# ===========
# g++ options
# ===========

CC := g++

# -DXXX:				define symbol XXX
# TIXML_USE_STL:		tinyxml uses std library
# O3:					optimizer level 3 (max)

# The following optimizations allow a developer to make classes with methods that
# are used in some applications and not others. As long as the extra functionality
# is never referenced in a given application, it will be stripped out.

# fdata-sections:		separate data symbols (for linker removal)
# ffunction-sections:	separate func symbols (for linker removal)
# -Wl,XXX:				XXX is a linker option
# --gc-sections:		garbage-collect unreferenced input sections
# --strip-all:			omit symbols from output (makes smaller exe)

CFLAGS := -DTIXML_USE_STL -O3 -fdata-sections -ffunction-sections

LFLAGS := -Wl,--gc-sections -Wl,--strip-all

OUTPUT = -o $(PATH_OUT)/$@

# ==============
# standard rules
# ==============

# Notes:
# (1) Place '@' in front of a rule to silence echoing the rule in build log.
#
# (2) This include file is usually included at the top of a make file.
# Hence, the targets defined here will be ahead of targets such as 'all'
# in the make file that uses this include. The default target when make
# is run with no named target is usually the first defined and we want
# that to be 'all' instead of 'CHECK_TINYLIB'. We put a '.' in front
# of a target name here to exclude it from the default target search.

%.o : %.cpp
	$(CC) $(CFLAGS) $(INCLUDES_STD) -c $< -o $@

.CHECK_ALL_LIBS : .CHECK_GENLIB .CHECK_UTLLIB .CHECK_TNYLIB

.CHECK_GENLIB :
	@ (cd $(PATH_GEN) && $(MAKE))

.CHECK_UTLLIB :
	@ (cd $(PATH_UTL) && $(MAKE))

.CHECK_TNYLIB :
	@ (cd $(PATH_XML) && $(MAKE))

.PHONY : .CHECK_ALL_LIBS .CHECK_GENLIB .CHECK_UTLLIB .CHECK_TNYLIB

# =================
# development rules
# =================

DEV_PATH := $(PATH_OUT)/devtest

DEV_OUTPUT = -o $(DEV_PATH)/$@

.DEV_MKDIR :
	@ (mkdir -p $(DEV_PATH))

.PHONY : .DEV_MKDIR

# =============================================
# =============================================
# =============================================


